
int g_default;
int g_var = 20;
const int G_CON1 = 10 * 20 + 1 * 3 / 1;
const int G_CON2 = 1, G_CON3 = 2, G_CON4 = 3;
const int G_CON_ARR[5-1] = {4 , 3, 2, 0 + G_CON3 - 1};
int g_arr[10] = {2, 3};

int factorial(int n) {
    if (n < 0) {
        printf("error: n = %d < 0\n", n);
        return 0;
    }
    if (n == 0) {
        return 1;
    }
    return n * factorial(n - 1);
}

void swap0(int a[], int b[]) {
    int t = a[0];
    a[0] = b[0];
    b[0] = t;
}

int copyEven(int dst[], int src[], int len) {
    int ret = 0;
    int i = 0;
    for (i = 0; i < len; i = i + 1) {
        if (src[i] % 2 == 0) {
            dst[i] = src[i];
            ret = ret + 1;
        }
    }
    return ret;
}

int map(int num) {
    static int map_cnt;
    map_cnt = map_cnt + 1;
    return (31 + num + map_cnt) * 5 % 17;
}

void meow() {
    printf("meow~ meow~\n");
}

void getArr(int dst[], int n) {
    int i;
    for (i = 0; i < n; i = i + 1) {
        dst[i] = getint();
    }
}

int main() {
    //out1
    printf("23371015\n");

    ;
    int var1, var2, var3 = 6;
    int arr1[5];
    int arr2[1] = {getint()};
    getArr(arr1, 3);
    swap0(arr1, arr2);
    //out2
    meow();
    var1 = 2 - 3;
    //out3: error, var2 = 0
    var2 = factorial(var1);
    //out4: map(6!), static++
    printf("%d\n", map(factorial(var3)));
    //out5: getint()
    printf("   %dx\n", map(arr1[0]));
    //out6: copy 4 and map
    printf("%d\n",map(copyEven(arr1, g_arr, 5)));

    int k = 0;
    for (; k < 1; k = k + 1) {
        printf("%d\n", k);
    }
    int cnt = -+-2 +1 - 3;    //cnt = 0


    //for test
    int i = 0;
    int j = 1;
    for (; i < 2; i = i + 2)
        cnt = cnt + 1;
    for (i = 0, j = 1; ;i = i + 1) {
        if (i >= 5)
            break;
        else if (i == 2) {
            continue;
        }
        else cnt = cnt + 2;
    }
    for (i = 0; i < 3; ) {
        i = i + 1;
        cnt = cnt + 1;
    }
    for (i = 0;;) {
        if (i >= 2) break;
        cnt = cnt + 1;
        i = i + 1;
    }
    for (;i <=1;)
        cnt = cnt + 1;
    for (;;i = i + 1) {
        if (i >= 5) break;
        cnt = cnt + 1;
    }
    i = 0;
    for (;;) {
        cnt = cnt + 1;
        if (i > 10) break;
        i = i + 1;
    }
    //out8 map cnt
    printf("%d\n", map(cnt));
    {}

    //out9 0
    printf("%d\n", g_default);
    //out10
    printf("test finished!\n");
    return 0;
}
